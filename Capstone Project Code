import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import LSTM, Dense, Dropout
from sklearn.metrics import mean_squared_error, mean_absolute_error
import matplotlib.pyplot as plt

train_data = pd.read_csv('/content/DailyDelhiClimateTrain.csv')
test_data = pd.read_csv('/content/DailyDelhiClimateTest.csv')

train_data = train_data[['meantemp', 'humidity', 'wind_speed', 'meanpressure']]
test_data = test_data[['meantemp', 'humidity', 'wind_speed', 'meanpressure']]

scaler = MinMaxScaler(feature_range=(0, 1))
train_scaled = scaler.fit_transform(train_data)
test_scaled = scaler.transform(test_data)

time_steps = 24

def prepare_sequences(data, time_steps):
    X, y = [], []
    for i in range(len(data) - time_steps):
        X.append(data[i:(i + time_steps)])
        y.append(data[i + time_steps])
    return np.array(X), np.array(y)

X_train, y_train = prepare_sequences(train_scaled, time_steps)
X_test, y_test = prepare_sequences(test_scaled, time_steps)

model = Sequential()
model.add(LSTM(units=100, return_sequences=True, input_shape=(X_train.shape[1], X_train.shape[2])))
model.add(Dropout(0.2))
model.add(LSTM(units=100))
model.add(Dropout(0.2))
model.add(Dense(units=train_scaled.shape[1]))
model.compile(optimizer='adam', loss='mean_squared_error')

model.fit(X_train, y_train, epochs=50, batch_size=64, verbose=1)

loss = model.evaluate(X_test, y_test)
print('Test Loss:', loss)

predictions = model.predict(X_test)

predictions = scaler.inverse_transform(predictions)
y_test = scaler.inverse_transform(y_test)

mae = mean_absolute_error(y_test, predictions)
mse = mean_squared_error(y_test, predictions)
rmse = np.sqrt(mse)

print('Mean Absolute Error:', mae)
print('Mean Squared Error:', mse)
print('Root Mean Squared Error:', rmse)

plt.figure(figsize=(10, 6))
plt.plot(y_test[:, 0], label='Actual')
plt.plot(predictions[:, 0], label='Predicted')
plt.title('Weather Prediction on Test Data')
plt.xlabel('Time')
plt.ylabel('Temperature')
plt.legend()
plt.show()
